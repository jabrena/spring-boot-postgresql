/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Actor;
import info.jab.ms.jooq.tables.pojos.JooqActor;
import info.jab.ms.jooq.tables.records.ActorRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ActorRepository extends DAOImpl<ActorRecord, JooqActor, Long> {

    /**
     * Create a new ActorRepository without any configuration
     */
    public ActorRepository() {
        super(Actor.ACTOR, JooqActor.class);
    }

    /**
     * Create a new ActorRepository with an attached configuration
     */
    @Autowired
    public ActorRepository(Configuration configuration) {
        super(Actor.ACTOR, JooqActor.class, configuration);
    }

    @Override
    public Long getId(JooqActor object) {
        return object.getActorId();
    }

    /**
     * Fetch records that have <code>actor_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqActor> fetchRangeOfActorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Actor.ACTOR.ACTOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actor_id IN (values)</code>
     */
    public List<JooqActor> fetchByActorId(Long... values) {
        return fetch(Actor.ACTOR.ACTOR_ID, values);
    }

    /**
     * Fetch a unique record that has <code>actor_id = value</code>
     */
    public JooqActor fetchOneByActorId(Long value) {
        return fetchOne(Actor.ACTOR.ACTOR_ID, value);
    }

    /**
     * Fetch a unique record that has <code>actor_id = value</code>
     */
    public Optional<JooqActor> fetchOptionalByActorId(Long value) {
        return fetchOptional(Actor.ACTOR.ACTOR_ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqActor> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Actor.ACTOR.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<JooqActor> fetchByFirstName(String... values) {
        return fetch(Actor.ACTOR.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqActor> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Actor.ACTOR.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<JooqActor> fetchByLastName(String... values) {
        return fetch(Actor.ACTOR.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqActor> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Actor.ACTOR.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqActor> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Actor.ACTOR.LAST_UPDATE, values);
    }
}
