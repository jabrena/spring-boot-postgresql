/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Store;
import info.jab.ms.jooq.tables.pojos.JooqStore;
import info.jab.ms.jooq.tables.records.StoreRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class StoreRepository extends DAOImpl<StoreRecord, JooqStore, Long> {

    /**
     * Create a new StoreRepository without any configuration
     */
    public StoreRepository() {
        super(Store.STORE, JooqStore.class);
    }

    /**
     * Create a new StoreRepository with an attached configuration
     */
    @Autowired
    public StoreRepository(Configuration configuration) {
        super(Store.STORE, JooqStore.class, configuration);
    }

    @Override
    public Long getId(JooqStore object) {
        return object.getStoreId();
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqStore> fetchRangeOfStoreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Store.STORE.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<JooqStore> fetchByStoreId(Long... values) {
        return fetch(Store.STORE.STORE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public JooqStore fetchOneByStoreId(Long value) {
        return fetchOne(Store.STORE.STORE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public Optional<JooqStore> fetchOptionalByStoreId(Long value) {
        return fetchOptional(Store.STORE.STORE_ID, value);
    }

    /**
     * Fetch records that have <code>manager_staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqStore> fetchRangeOfManagerStaffId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Store.STORE.MANAGER_STAFF_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manager_staff_id IN (values)</code>
     */
    public List<JooqStore> fetchByManagerStaffId(Long... values) {
        return fetch(Store.STORE.MANAGER_STAFF_ID, values);
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqStore> fetchRangeOfAddressId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Store.STORE.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<JooqStore> fetchByAddressId(Long... values) {
        return fetch(Store.STORE.ADDRESS_ID, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqStore> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Store.STORE.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqStore> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Store.STORE.LAST_UPDATE, values);
    }
}
