/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Address;
import info.jab.ms.jooq.tables.pojos.JooqAddress;
import info.jab.ms.jooq.tables.records.AddressRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AddressRepository extends DAOImpl<AddressRecord, JooqAddress, Long> {

    /**
     * Create a new AddressRepository without any configuration
     */
    public AddressRepository() {
        super(Address.ADDRESS, JooqAddress.class);
    }

    /**
     * Create a new AddressRepository with an attached configuration
     */
    @Autowired
    public AddressRepository(Configuration configuration) {
        super(Address.ADDRESS, JooqAddress.class, configuration);
    }

    @Override
    public Long getId(JooqAddress object) {
        return object.getAddressId();
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfAddressId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<JooqAddress> fetchByAddressId(Long... values) {
        return fetch(Address.ADDRESS.ADDRESS_ID, values);
    }

    /**
     * Fetch a unique record that has <code>address_id = value</code>
     */
    public JooqAddress fetchOneByAddressId(Long value) {
        return fetchOne(Address.ADDRESS.ADDRESS_ID, value);
    }

    /**
     * Fetch a unique record that has <code>address_id = value</code>
     */
    public Optional<JooqAddress> fetchOptionalByAddressId(Long value) {
        return fetchOptional(Address.ADDRESS.ADDRESS_ID, value);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<JooqAddress> fetchByAddress(String... values) {
        return fetch(Address.ADDRESS.ADDRESS_, values);
    }

    /**
     * Fetch records that have <code>address2 BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfAddress2(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS2, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address2 IN (values)</code>
     */
    public List<JooqAddress> fetchByAddress2(String... values) {
        return fetch(Address.ADDRESS.ADDRESS2, values);
    }

    /**
     * Fetch records that have <code>district BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfDistrict(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.DISTRICT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>district IN (values)</code>
     */
    public List<JooqAddress> fetchByDistrict(String... values) {
        return fetch(Address.ADDRESS.DISTRICT, values);
    }

    /**
     * Fetch records that have <code>city_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfCityId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Address.ADDRESS.CITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city_id IN (values)</code>
     */
    public List<JooqAddress> fetchByCityId(Long... values) {
        return fetch(Address.ADDRESS.CITY_ID, values);
    }

    /**
     * Fetch records that have <code>postal_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfPostalCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.POSTAL_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>postal_code IN (values)</code>
     */
    public List<JooqAddress> fetchByPostalCode(String... values) {
        return fetch(Address.ADDRESS.POSTAL_CODE, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    public List<JooqAddress> fetchByPhone(String... values) {
        return fetch(Address.ADDRESS.PHONE, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAddress> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Address.ADDRESS.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqAddress> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Address.ADDRESS.LAST_UPDATE, values);
    }
}
