/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.City;
import info.jab.ms.jooq.tables.pojos.JooqCity;
import info.jab.ms.jooq.tables.records.CityRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CityRepository extends DAOImpl<CityRecord, JooqCity, Long> {

    /**
     * Create a new CityRepository without any configuration
     */
    public CityRepository() {
        super(City.CITY, JooqCity.class);
    }

    /**
     * Create a new CityRepository with an attached configuration
     */
    @Autowired
    public CityRepository(Configuration configuration) {
        super(City.CITY, JooqCity.class, configuration);
    }

    @Override
    public Long getId(JooqCity object) {
        return object.getCityId();
    }

    /**
     * Fetch records that have <code>city_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCity> fetchRangeOfCityId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(City.CITY.CITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city_id IN (values)</code>
     */
    public List<JooqCity> fetchByCityId(Long... values) {
        return fetch(City.CITY.CITY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>city_id = value</code>
     */
    public JooqCity fetchOneByCityId(Long value) {
        return fetchOne(City.CITY.CITY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>city_id = value</code>
     */
    public Optional<JooqCity> fetchOptionalByCityId(Long value) {
        return fetchOptional(City.CITY.CITY_ID, value);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCity> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(City.CITY.CITY_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<JooqCity> fetchByCity(String... values) {
        return fetch(City.CITY.CITY_, values);
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCity> fetchRangeOfCountryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(City.CITY.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    public List<JooqCity> fetchByCountryId(Long... values) {
        return fetch(City.CITY.COUNTRY_ID, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCity> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(City.CITY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqCity> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(City.CITY.LAST_UPDATE, values);
    }
}
