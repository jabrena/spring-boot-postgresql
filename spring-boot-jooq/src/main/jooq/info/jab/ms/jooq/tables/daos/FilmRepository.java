/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.enums.MpaaRating;
import info.jab.ms.jooq.tables.Film;
import info.jab.ms.jooq.tables.pojos.JooqFilm;
import info.jab.ms.jooq.tables.records.FilmRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class FilmRepository extends DAOImpl<FilmRecord, JooqFilm, Long> {

    /**
     * Create a new FilmRepository without any configuration
     */
    public FilmRepository() {
        super(Film.FILM, JooqFilm.class);
    }

    /**
     * Create a new FilmRepository with an attached configuration
     */
    @Autowired
    public FilmRepository(Configuration configuration) {
        super(Film.FILM, JooqFilm.class, configuration);
    }

    @Override
    public Long getId(JooqFilm object) {
        return object.getFilmId();
    }

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfFilmId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Film.FILM.FILM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    public List<JooqFilm> fetchByFilmId(Long... values) {
        return fetch(Film.FILM.FILM_ID, values);
    }

    /**
     * Fetch a unique record that has <code>film_id = value</code>
     */
    public JooqFilm fetchOneByFilmId(Long value) {
        return fetchOne(Film.FILM.FILM_ID, value);
    }

    /**
     * Fetch a unique record that has <code>film_id = value</code>
     */
    public Optional<JooqFilm> fetchOptionalByFilmId(Long value) {
        return fetchOptional(Film.FILM.FILM_ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Film.FILM.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<JooqFilm> fetchByTitle(String... values) {
        return fetch(Film.FILM.TITLE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Film.FILM.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<JooqFilm> fetchByDescription(String... values) {
        return fetch(Film.FILM.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>release_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfReleaseYear(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Film.FILM.RELEASE_YEAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>release_year IN (values)</code>
     */
    public List<JooqFilm> fetchByReleaseYear(Integer... values) {
        return fetch(Film.FILM.RELEASE_YEAR, values);
    }

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfLanguageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Film.FILM.LANGUAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    public List<JooqFilm> fetchByLanguageId(Long... values) {
        return fetch(Film.FILM.LANGUAGE_ID, values);
    }

    /**
     * Fetch records that have <code>original_language_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfOriginalLanguageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Film.FILM.ORIGINAL_LANGUAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>original_language_id IN (values)</code>
     */
    public List<JooqFilm> fetchByOriginalLanguageId(Long... values) {
        return fetch(Film.FILM.ORIGINAL_LANGUAGE_ID, values);
    }

    /**
     * Fetch records that have <code>rental_duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfRentalDuration(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(Film.FILM.RENTAL_DURATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rental_duration IN (values)</code>
     */
    public List<JooqFilm> fetchByRentalDuration(Short... values) {
        return fetch(Film.FILM.RENTAL_DURATION, values);
    }

    /**
     * Fetch records that have <code>rental_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfRentalRate(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Film.FILM.RENTAL_RATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rental_rate IN (values)</code>
     */
    public List<JooqFilm> fetchByRentalRate(BigDecimal... values) {
        return fetch(Film.FILM.RENTAL_RATE, values);
    }

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfLength(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(Film.FILM.LENGTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    public List<JooqFilm> fetchByLength(Short... values) {
        return fetch(Film.FILM.LENGTH, values);
    }

    /**
     * Fetch records that have <code>replacement_cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfReplacementCost(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Film.FILM.REPLACEMENT_COST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>replacement_cost IN (values)</code>
     */
    public List<JooqFilm> fetchByReplacementCost(BigDecimal... values) {
        return fetch(Film.FILM.REPLACEMENT_COST, values);
    }

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfRating(MpaaRating lowerInclusive, MpaaRating upperInclusive) {
        return fetchRange(Film.FILM.RATING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    public List<JooqFilm> fetchByRating(MpaaRating... values) {
        return fetch(Film.FILM.RATING, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Film.FILM.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqFilm> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Film.FILM.LAST_UPDATE, values);
    }

    /**
     * Fetch records that have <code>special_features BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFilm> fetchRangeOfSpecialFeatures(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(Film.FILM.SPECIAL_FEATURES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>special_features IN (values)</code>
     */
    public List<JooqFilm> fetchBySpecialFeatures(String[]... values) {
        return fetch(Film.FILM.SPECIAL_FEATURES, values);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<JooqFilm> fetchRangeOfFulltext(Object lowerInclusive, Object upperInclusive) {
        return fetchRange(Film.FILM.FULLTEXT, lowerInclusive, upperInclusive);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<JooqFilm> fetchByFulltext(Object... values) {
        return fetch(Film.FILM.FULLTEXT, values);
    }
}
