/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Category;
import info.jab.ms.jooq.tables.pojos.JooqCategory;
import info.jab.ms.jooq.tables.records.CategoryRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CategoryRepository extends DAOImpl<CategoryRecord, JooqCategory, Long> {

    /**
     * Create a new CategoryRepository without any configuration
     */
    public CategoryRepository() {
        super(Category.CATEGORY, JooqCategory.class);
    }

    /**
     * Create a new CategoryRepository with an attached configuration
     */
    @Autowired
    public CategoryRepository(Configuration configuration) {
        super(Category.CATEGORY, JooqCategory.class, configuration);
    }

    @Override
    public Long getId(JooqCategory object) {
        return object.getCategoryId();
    }

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategory> fetchRangeOfCategoryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Category.CATEGORY.CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    public List<JooqCategory> fetchByCategoryId(Long... values) {
        return fetch(Category.CATEGORY.CATEGORY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>category_id = value</code>
     */
    public JooqCategory fetchOneByCategoryId(Long value) {
        return fetchOne(Category.CATEGORY.CATEGORY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>category_id = value</code>
     */
    public Optional<JooqCategory> fetchOptionalByCategoryId(Long value) {
        return fetchOptional(Category.CATEGORY.CATEGORY_ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategory> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<JooqCategory> fetchByName(String... values) {
        return fetch(Category.CATEGORY.NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCategory> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Category.CATEGORY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqCategory> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Category.CATEGORY.LAST_UPDATE, values);
    }
}
