/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Language;
import info.jab.ms.jooq.tables.pojos.JooqLanguage;
import info.jab.ms.jooq.tables.records.LanguageRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class LanguageRepository extends DAOImpl<LanguageRecord, JooqLanguage, Long> {

    /**
     * Create a new LanguageRepository without any configuration
     */
    public LanguageRepository() {
        super(Language.LANGUAGE, JooqLanguage.class);
    }

    /**
     * Create a new LanguageRepository with an attached configuration
     */
    @Autowired
    public LanguageRepository(Configuration configuration) {
        super(Language.LANGUAGE, JooqLanguage.class, configuration);
    }

    @Override
    public Long getId(JooqLanguage object) {
        return object.getLanguageId();
    }

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqLanguage> fetchRangeOfLanguageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Language.LANGUAGE.LANGUAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    public List<JooqLanguage> fetchByLanguageId(Long... values) {
        return fetch(Language.LANGUAGE.LANGUAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>language_id = value</code>
     */
    public JooqLanguage fetchOneByLanguageId(Long value) {
        return fetchOne(Language.LANGUAGE.LANGUAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>language_id = value</code>
     */
    public Optional<JooqLanguage> fetchOptionalByLanguageId(Long value) {
        return fetchOptional(Language.LANGUAGE.LANGUAGE_ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqLanguage> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Language.LANGUAGE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<JooqLanguage> fetchByName(String... values) {
        return fetch(Language.LANGUAGE.NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqLanguage> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Language.LANGUAGE.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqLanguage> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Language.LANGUAGE.LAST_UPDATE, values);
    }
}
