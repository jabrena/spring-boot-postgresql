/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Country;
import info.jab.ms.jooq.tables.pojos.JooqCountry;
import info.jab.ms.jooq.tables.records.CountryRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CountryRepository extends DAOImpl<CountryRecord, JooqCountry, Long> {

    /**
     * Create a new CountryRepository without any configuration
     */
    public CountryRepository() {
        super(Country.COUNTRY, JooqCountry.class);
    }

    /**
     * Create a new CountryRepository with an attached configuration
     */
    @Autowired
    public CountryRepository(Configuration configuration) {
        super(Country.COUNTRY, JooqCountry.class, configuration);
    }

    @Override
    public Long getId(JooqCountry object) {
        return object.getCountryId();
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCountry> fetchRangeOfCountryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Country.COUNTRY.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    public List<JooqCountry> fetchByCountryId(Long... values) {
        return fetch(Country.COUNTRY.COUNTRY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>country_id = value</code>
     */
    public JooqCountry fetchOneByCountryId(Long value) {
        return fetchOne(Country.COUNTRY.COUNTRY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>country_id = value</code>
     */
    public Optional<JooqCountry> fetchOptionalByCountryId(Long value) {
        return fetchOptional(Country.COUNTRY.COUNTRY_ID, value);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCountry> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Country.COUNTRY.COUNTRY_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<JooqCountry> fetchByCountry(String... values) {
        return fetch(Country.COUNTRY.COUNTRY_, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqCountry> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Country.COUNTRY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqCountry> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Country.COUNTRY.LAST_UPDATE, values);
    }
}
