/*
 * This file is generated by jOOQ.
 */
package info.jab.ms.jooq.tables.daos;


import info.jab.ms.jooq.tables.Inventory;
import info.jab.ms.jooq.tables.pojos.JooqInventory;
import info.jab.ms.jooq.tables.records.InventoryRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class InventoryRepository extends DAOImpl<InventoryRecord, JooqInventory, Long> {

    /**
     * Create a new InventoryRepository without any configuration
     */
    public InventoryRepository() {
        super(Inventory.INVENTORY, JooqInventory.class);
    }

    /**
     * Create a new InventoryRepository with an attached configuration
     */
    @Autowired
    public InventoryRepository(Configuration configuration) {
        super(Inventory.INVENTORY, JooqInventory.class, configuration);
    }

    @Override
    public Long getId(JooqInventory object) {
        return object.getInventoryId();
    }

    /**
     * Fetch records that have <code>inventory_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqInventory> fetchRangeOfInventoryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Inventory.INVENTORY.INVENTORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inventory_id IN (values)</code>
     */
    public List<JooqInventory> fetchByInventoryId(Long... values) {
        return fetch(Inventory.INVENTORY.INVENTORY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>inventory_id = value</code>
     */
    public JooqInventory fetchOneByInventoryId(Long value) {
        return fetchOne(Inventory.INVENTORY.INVENTORY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>inventory_id = value</code>
     */
    public Optional<JooqInventory> fetchOptionalByInventoryId(Long value) {
        return fetchOptional(Inventory.INVENTORY.INVENTORY_ID, value);
    }

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqInventory> fetchRangeOfFilmId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Inventory.INVENTORY.FILM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    public List<JooqInventory> fetchByFilmId(Long... values) {
        return fetch(Inventory.INVENTORY.FILM_ID, values);
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqInventory> fetchRangeOfStoreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Inventory.INVENTORY.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<JooqInventory> fetchByStoreId(Long... values) {
        return fetch(Inventory.INVENTORY.STORE_ID, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqInventory> fetchRangeOfLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Inventory.INVENTORY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<JooqInventory> fetchByLastUpdate(LocalDateTime... values) {
        return fetch(Inventory.INVENTORY.LAST_UPDATE, values);
    }
}
