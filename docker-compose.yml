version: "3.7"

services:

  sakiladb:
    image: frantiseks/postgres-sakila
    restart: always
    environment:
      POSTGRES_PASSWORD: sakila
    ports:
      - "5432:5432"
    networks:
      - spring-cloud-network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: currito@gmail.com
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - sakiladb
    networks:
      - spring-cloud-network

  schemaspy:
    image: schema-spy-local:latest
    container_name: schemaspy
    volumes:
      - ./docs/spy_data:/output
    depends_on:
      - sakiladb
#    entrypoint: ["/entrypoint.sh", "-t", "pgsql", "-db", "postgres",
#                 "-host", "sakiladb", "-port", "5432", "-u", "postgres",
#                 "-p", "sakila", "-s", "public"]
    networks:
      - spring-cloud-network

  nginx:
    image: nginx:latest
    container_name: nginx_schemaspy
    volumes:
      - ./docs/spy_data:/usr/share/nginx/html
    ports:
      - "99:80"
    depends_on:
      - schemaspy
    networks:
      - spring-cloud-network

  spring-boot-jdbc:
    container_name: spring-boot-jdbc
    build:
      context: spring-boot-jdbc
      dockerfile: Dockerfile
    image: spring-boot-jdbc:latest
    ports:
      - 8081:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker_compose
    networks:
      - spring-cloud-network

  spring-boot-jooq:
    container_name: spring-boot-jooq
    build:
      context: spring-boot-jooq
      dockerfile: Dockerfile
    image: spring-boot-jooq:latest
    ports:
      - 8082:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker_compose
    networks:
      - spring-cloud-network

  spring-data-jdbc:
    container_name: spring-data-jdbc
    build:
      context: spring-data-jdbc
      dockerfile: Dockerfile
    image: spring-data-jdbc:latest
    ports:
      - 8083:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker_compose
    networks:
      - spring-cloud-network

  spring-data-jpa:
    container_name: spring-data-jpa
    build:
      context: spring-data-jpa
      dockerfile: Dockerfile
    image: spring-data-jpa:latest
    ports:
      - 8086:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker_compose
    networks:
      - spring-cloud-network

  spring-boot-mybatis:
    container_name: spring-boot-mybatis
    build:
      context: spring-boot-mybatis
      dockerfile: Dockerfile
    image: spring-boot-mybatis:latest
    ports:
      - 8085:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker_compose
    networks:
      - spring-cloud-network

networks:
    spring-cloud-network:
        driver: bridge

volumes:
  local_pgdata:
  pgadmin-data:
